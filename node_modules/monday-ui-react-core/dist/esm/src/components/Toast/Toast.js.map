{"version":3,"file":"Toast.js","sources":["../../../../../src/components/Toast/Toast.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC, ReactElement, useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Button from \"../../components/Button/Button\";\nimport { IconSubComponentProps } from \"../Icon/Icon\";\nimport Text from \"../Text/Text\";\nimport Loader from \"../Loader/Loader\";\nimport Flex from \"../Flex/Flex\";\nimport CloseSmall from \"../Icon/Icons/components/CloseSmall\";\nimport ToastLink from \"./ToastLink/ToastLink\";\nimport ToastButton from \"./ToastButton/ToastButton\";\nimport { ToastAction, ToastActionType, ToastType } from \"./ToastConstants\";\nimport { getIcon } from \"./ToastHelpers\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { withStaticProps, VibeComponentProps } from \"../../types\";\nimport styles from \"./Toast.module.scss\";\nimport IconButton from \"../IconButton/IconButton\";\nimport usePrevious from \"../../hooks/usePrevious\";\n\nexport interface ToastProps extends VibeComponentProps {\n  actions?: ToastAction[];\n  /** If true, Toast is open (visible) */\n  open?: boolean;\n  loading?: boolean;\n  type?: ToastType;\n  /** Possible to override the default icon */\n  icon?: string | React.FC<IconSubComponentProps> | null;\n  /** If true, won't show the icon */\n  hideIcon?: boolean;\n  /** The action to display */\n  action?: JSX.Element;\n  /** If false, won't show the close button */\n  closeable?: boolean;\n  onClose?: () => void;\n  /** The number of milliseconds to wait before\n   * automatically closing the Toast\n   * (0 or null cancels this behaviour) */\n  autoHideDuration?: number;\n  children?: ReactElement | ReactElement[] | string;\n  closeButtonAriaLabel?: string;\n}\n\nconst Toast: FC<ToastProps> & { types?: typeof ToastType; actionTypes?: typeof ToastActionType } = ({\n  open = false,\n  loading = false,\n  autoHideDuration = null,\n  type = ToastType.NORMAL,\n  icon,\n  hideIcon = false,\n  action: deprecatedAction,\n  actions,\n  children,\n  closeable = true,\n  onClose = NOOP,\n  className,\n  id,\n  closeButtonAriaLabel = \"Close\",\n  \"data-testid\": dataTestId\n}) => {\n  const ref = useRef(null);\n  const prevActions = usePrevious(actions?.length);\n  const toastLinks = useMemo(() => {\n    return actions\n      ? actions\n          .filter(action => action.type === ToastActionType.LINK)\n          .map(({ type: _type, ...otherProps }) => (\n            <ToastLink key={otherProps.href} className={styles.actionLink} {...otherProps} />\n          ))\n      : null;\n  }, [actions]);\n\n  const shouldShowButtonTransition = useMemo(() => {\n    return prevActions !== undefined && actions?.length !== prevActions;\n  }, [actions, prevActions]);\n\n  const toastButtons: JSX.Element[] | null = useMemo(() => {\n    return actions\n      ? actions\n          .filter(action => action.type === ToastActionType.BUTTON)\n          .map(({ type: _type, content, ...otherProps }, index) => (\n            <ToastButton\n              key={`alert-button-${index}`}\n              className={cx(styles.actionButton, { [styles.withTransition]: shouldShowButtonTransition })}\n              {...otherProps}\n            >\n              {content}\n            </ToastButton>\n          ))\n      : null;\n  }, [actions, shouldShowButtonTransition]);\n\n  const classNames = useMemo(\n    () => cx(styles.toast, getStyle(styles, camelCase(\"type-\" + type)), className),\n    [type, className]\n  );\n\n  const handleClose = useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n\n  /* Timer */\n  const timerAutoHide = useRef<NodeJS.Timeout>();\n  const setAutoHideTimer = useCallback(\n    (duration: number) => {\n      if (!onClose || duration == null) {\n        return;\n      }\n\n      clearTimeout(timerAutoHide.current);\n      timerAutoHide.current = setTimeout(() => {\n        handleClose();\n      }, duration);\n    },\n    [handleClose, onClose]\n  );\n\n  useEffect(() => {\n    if (open && autoHideDuration > 0) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n\n  const iconElement = !hideIcon && getIcon(type, icon);\n\n  // https://n12v.com/css-transition-to-from-auto/\n  const recalculateElementWidth = useCallback((element: HTMLElement) => {\n    const prevWidth = element.style.width;\n    element.style.width = \"auto\";\n    const endWidth = getComputedStyle(element).width;\n    element.style.width = prevWidth;\n    element.offsetWidth; // force repaint\n    element.style.width = endWidth;\n  }, []);\n\n  useEffect(() => {\n    if (ref.current) {\n      recalculateElementWidth(ref.current);\n    }\n  }, [children, recalculateElementWidth]);\n\n  return (\n    <CSSTransition\n      in={open}\n      classNames={{ enterActive: styles.enterActive, exitActive: styles.exitActive }}\n      timeout={400}\n      unmountOnExit\n    >\n      <Text\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TOAST, id)}\n        type={Text.types.TEXT2}\n        element=\"div\"\n        color={Text.colors.FIXED_LIGHT}\n        className={classNames}\n        role=\"alert\"\n        aria-live=\"polite\"\n        ref={ref}\n      >\n        {iconElement && <div className={cx(styles.icon)}>{iconElement}</div>}\n        <Flex align={Flex.align.CENTER} gap={Flex.gaps.LARGE} className={styles.content}>\n          <Flex\n            gap={Flex.gaps.MEDIUM}\n            data-testid={getTestId(ComponentDefaultTestId.TOAST_CONTENT)}\n            className={styles.textContent}\n          >\n            <span>{children}</span>\n            {toastLinks}\n          </Flex>\n          {(toastButtons || deprecatedAction) && (toastButtons || deprecatedAction)}\n          {loading && <Loader size={Loader.sizes.XS} />}\n        </Flex>\n        {closeable && (\n          <IconButton\n            className={cx(styles.closeButton)}\n            onClick={handleClose}\n            size={Button.sizes.SMALL}\n            kind={Button.kinds.TERTIARY}\n            color={Button.colors.FIXED_LIGHT}\n            ariaLabel={closeButtonAriaLabel}\n            data-testid={getTestId(ComponentDefaultTestId.TOAST_CLOSE_BUTTON)}\n            icon={CloseSmall}\n            hideTooltip\n          />\n        )}\n      </Text>\n    </CSSTransition>\n  );\n};\n\nexport default withStaticProps(Toast, {\n  types: ToastType,\n  actionTypes: ToastActionType\n});\n"],"names":["withStaticProps","_ref","_ref$open","open","_ref$loading","loading","_ref$autoHideDuration","autoHideDuration","_ref$type","type","ToastType","NORMAL","icon","_ref$hideIcon","hideIcon","deprecatedAction","action","actions","children","_ref$closeable","closeable","_ref$onClose","onClose","NOOP","className","id","_ref$closeButtonAriaL","closeButtonAriaLabel","dataTestId","ref","useRef","prevActions","usePrevious","length","toastLinks","useMemo","filter","ToastActionType","LINK","map","_a","otherProps","__rest","React","createElement","ToastLink","key","href","styles","actionLink","shouldShowButtonTransition","undefined","toastButtons","BUTTON","index","content","ToastButton","Object","assign","concat","cx","actionButton","_defineProperty","withTransition","classNames","toast","getStyle","camelCase","handleClose","useCallback","timerAutoHide","setAutoHideTimer","duration","clearTimeout","current","setTimeout","useEffect","iconElement","getIcon","recalculateElementWidth","element","prevWidth","style","width","endWidth","getComputedStyle","CSSTransition","in","enterActive","exitActive","timeout","unmountOnExit","Text","getTestId","ComponentDefaultTestId","TOAST","types","TEXT2","color","colors","FIXED_LIGHT","role","Flex","align","CENTER","gap","gaps","LARGE","MEDIUM","TOAST_CONTENT","textContent","Loader","size","sizes","XS","IconButton","closeButton","onClick","Button","SMALL","kind","kinds","TERTIARY","ariaLabel","TOAST_CLOSE_BUTTON","CloseSmall","hideTooltip","actionTypes"],"mappings":"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"}