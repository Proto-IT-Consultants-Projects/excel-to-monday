{"version":3,"file":"TextArea.js","sources":["../../../../../src/components/TextArea/TextArea.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport styles from \"./TextArea.module.scss\";\nimport { TextAreaProps, TextAreaSize } from \"./TextArea.types\";\nimport Text from \"../Text/Text\";\n\nconst DEFAULT_ROWS: Record<TextAreaSize, number> = {\n  small: 3,\n  large: 4\n};\n\nconst TextArea = forwardRef(\n  (\n    {\n      size = \"small\",\n      rows,\n      label,\n      helpText,\n      success,\n      error,\n      className,\n      \"data-testid\": dataTestId,\n      id,\n      disabled,\n      readOnly,\n      required,\n      resize = true,\n      ...rest\n    }: TextAreaProps,\n    ref: React.ForwardedRef<HTMLTextAreaElement>\n  ) => {\n    const numRows = rows || DEFAULT_ROWS[size];\n    const helpTextId = helpText && `${id}-help-text`;\n\n    return (\n      <div\n        className={cx(\n          styles.textAreaWrapper,\n          {\n            [styles.error]: error,\n            [styles.success]: success,\n            [styles.disabled]: disabled,\n            [styles.readOnly]: readOnly\n          },\n          className\n        )}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TEXT_AREA, id)}\n      >\n        {label && (\n          <label className={cx(styles.label, { [styles.required]: required })} htmlFor={id}>\n            {label}\n          </label>\n        )}\n        <textarea\n          {...rest}\n          id={id}\n          ref={ref}\n          disabled={disabled}\n          readOnly={readOnly}\n          required={required}\n          rows={numRows}\n          className={cx(styles.textArea, [styles[size]], { [styles.resize]: resize })}\n          aria-invalid={error}\n          aria-describedby={helpTextId ?? undefined}\n        />\n        {helpText && (\n          <Text className={cx(styles.helpText)} color={Text.colors.INHERIT} id={helpTextId}>\n            {helpText}\n          </Text>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default TextArea;\n"],"names":["DEFAULT_ROWS","small","large","TextArea","forwardRef","_a","ref","_a$size","size","rows","label","helpText","success","error","className","dataTestId","id","disabled","readOnly","required","_a$resize","resize","rest","__rest","numRows","helpTextId","concat","React","cx","styles","textAreaWrapper","_defineProperty","getTestId","ComponentDefaultTestId","TEXT_AREA","createElement","htmlFor","Object","assign","textArea","undefined","Text","color","colors","INHERIT"],"mappings":"kYAQA,IAAMA,EAA6C,CACjDC,MAAO,EACPC,MAAO,GAGHC,EAAWC,GACf,SACEC,EAgBAC,GAhBA,IAAAC,EAegBF,EAddG,KAAAA,OAAO,IAAHD,EAAG,QAAOA,EACdE,EAacJ,EAbdI,KACAC,EAYcL,EAZdK,MACAC,EAWcN,EAXdM,SACAC,EAUcP,EAVdO,QACAC,EAScR,EATdQ,MACAC,EAQcT,EARdS,UACeC,EAODV,EAPd,eACAW,EAMcX,EANdW,GACAC,EAKcZ,EALdY,SACAC,EAIcb,EAJda,SACAC,EAGcd,EAHdc,SAAQC,EAGMf,EAFdgB,OAAAA,OAAS,IAAHD,GAAOA,EACVE,EAAIC,EAAAlB,EAdT,+HAkBMmB,EAAUf,GAAQT,EAAaQ,GAC/BiB,EAAad,MAAQe,OAAOV,EAAc,cAEhD,OACEW,uBACEb,UAAWc,EACTC,EAAOC,gBAAeC,EAAAA,EAAAA,EAAAA,KAEnBF,EAAOhB,MAAQA,GACfgB,EAAOjB,QAAUA,GACjBiB,EAAOZ,SAAWA,GAClBY,EAAOX,SAAWA,GAErBJ,GAEW,cAAAC,GAAciB,EAAUC,EAAuBC,UAAWlB,IAEtEN,GACCiB,EAAOQ,cAAA,QAAA,CAAArB,UAAWc,EAAGC,EAAOnB,MAAKqB,EAAA,CAAA,EAAKF,EAAOV,SAAWA,IAAaiB,QAASpB,GAC3EN,GAGLiB,EAAAQ,cAAA,WAAAE,OAAAC,OAAA,CAAA,EACMhB,EAAI,CACRN,GAAIA,EACJV,IAAKA,EACLW,SAAUA,EACVC,SAAUA,EACVC,SAAUA,EACVV,KAAMe,EACNV,UAAWc,EAAGC,EAAOU,SAAU,CAACV,EAAOrB,IAAMuB,EAAKF,CAAAA,EAAAA,EAAOR,OAASA,IAAS,eAC7DR,EAAK,mBACDY,QAAAA,OAAce,KAEjC7B,GACCgB,EAACQ,cAAAM,EAAK,CAAA3B,UAAWc,EAAGC,EAAOlB,UAAW+B,MAAOD,EAAKE,OAAOC,QAAS5B,GAAIS,GACnEd,GAKX"}